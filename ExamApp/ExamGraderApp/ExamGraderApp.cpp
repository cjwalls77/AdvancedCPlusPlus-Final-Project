/*+===================================================================
File:      ExamGraderApp.cpp

Summary:   Defines the entry point for the console application.

Classes:   None

Origin:    File generated by Visual Studio project template.

Author:    Charles "C.J." Walls
===================================================================+*/
#include "stdafx.h"
#include "FileRepository.h"
#include "AnswerSheet.h"

using namespace std;

/*+===================================================================
Function: main

Summary:  Main entry point to application.

Args:     None

Returns:  int
Indicates how the application exited.  Normal exit is 0.
===================================================================+*/
int main()
{
	ExamGraderAppModels::Repository *repository = new ExamGraderAppModels::FileRepository();
	ExamGraderAppModels::AnswerSheet *answersheet = nullptr;
	ExamGraderAppModels::ExamRubric *examRubric = nullptr;

	auto pendingExamIndexItems = repository->getAnswerSheetIndex();

	if (!pendingExamIndexItems->empty())
	{
		cout << "Exam grading started." << endl;

		for (auto it = pendingExamIndexItems->begin(); it != pendingExamIndexItems->end(); ++it)
		{
			// Get Answers and Keys for Exam to be graded
			answersheet = repository->getAnswerSheet((*it));
			examRubric = repository->getExamRubricForExam((*it)->getExamId());

			try
			{
				if (answersheet != nullptr && examRubric != nullptr)
				{
					// Grade answer sheet
					answersheet->gradeAnswerSheet(*examRubric);

					// Save graded answer sheet
					repository->saveGradedAnswerSheet((*answersheet), (*examRubric));

					// Remove pending exam
					repository->removeAnswerSheetFromPending((*it)->getId());
				}
			}
			catch (...)
			{
				cout << "Error: Answer sheet file " << (*it)->getFileName() << " could not be graded." << endl;
			}

			// Clean-up for loop
			delete answersheet;
			delete examRubric;
		}
	}
	else
	{
		cout << endl << "No exams to grade." << endl;
	}

	// Final Clean-up before end
	while (!pendingExamIndexItems->empty())
	{
		delete pendingExamIndexItems->back();
		pendingExamIndexItems->pop_back();
	}

	delete pendingExamIndexItems;
	delete repository;

	cout << endl << "Exam grading ended." << endl << endl;

	system("PAUSE");
    return 0;
}

